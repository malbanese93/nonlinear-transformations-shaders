Shader "Surface/Compute" {
    Properties {

    }
    SubShader {
        Tags { "RenderType" = "Opaque" }
        CGPROGRAM
        #include "UnityCG.cginc"
        #pragma surface surf Lambert vertex:vert
        #pragma target 5.0

        // Data type for structured buffer.
        struct VertexData {
        	float3 pos;
        	float3 normal;
        };

        // Because of the surface shaders limitations, a non-empty input struct
		// must always be defined, even if not used.
		struct Input {
		  int ignore_this;
		};

        // Define custom appdata to order to use VERTEX ID in vert function
        struct custom_appdata_full {
            // Copy from usual appdata_full
            float4 vertex    : POSITION;  // The vertex position in model space.
            float3 normal    : NORMAL;    // The vertex normal in model space.
            float4 texcoord  : TEXCOORD0; // The first UV coordinate.
            float4 texcoord1 : TEXCOORD1; // The second UV coordinate.
            float4 texcoord2 : TEXCOORD2; // The second UV coordinate.
            float4 tangent   : TANGENT;   // The tangent vector in Model Space (used for normal mapping).
            float4 color     : COLOR;     // Per-vertex color

            // New field wrt to usual appdata_full
            uint id : SV_VertexID;
        };

        // NB: compute shaders use DX11 syntax! No support for previous architectures (use vshader instead)
        #ifdef SHADER_API_D3D11
            uniform StructuredBuffer<VertexData> buffer;
        #endif

        // NB: Per-vertex identifier automatically generated by the runtime
        // Available as the input to the vertex shader only.
        // We are ignoring the real vertex data; just use the ones from the
        // compute buffer
        void vert (inout custom_appdata_full v) {
            // Every time you access the buffer you need to add this preprocessing directive
            #ifdef SHADER_API_D3D11
                v.vertex = float4(buffer[v.id].pos,1);
                v.normal = buffer[v.id].normal;
            #endif
        }

        void surf (Input IN, inout SurfaceOutput o) {
			o.Albedo = half3(0,0.5,0.5);
		}

        /*
        v2f vert (uint id : SV_VertexID) {

          v2f o;
          // Every time you access the buffer you need to add this preprocessing directive
          #ifdef SHADER_API_D3D11
          o.vertex = UnityObjectToClipPos(float4(buffer[id].pos,1));
          o.normal = buffer[id].normal;
          #endif

          return o;
        }*/

      ENDCG
    }
}
